<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd">
<mapper namespace="pl.solvd.concerthall.DAO.interfacesDAO.IAuthorsDAO">
    <sql id="body">
        a.id, a.first_name, a.last_name
    </sql>
    <select id="getEntityById" resultMap="authorResultMap">
        SELECT
        <include refid="body"/>
        FROM
        authors a
        WHERE id = #{id}
    </select>
    <select id="getAll" resultMap="authorResultMap">
        SELECT
        <include refid="body"/>
        FROM
        authors a
    </select>
    <insert id="addEntity" useGeneratedKeys="true" keyProperty="id">
        insert into authors (firstName, lastName)
        values (#{firstName}, #{lastName})
    </insert>
    <update id="updateEntity">
        update authors set
        firstName = #{firstName},
        lastName = #{lastName}
        where id = #{id}
    </update>
    <delete id="deleteEntity">
        delete from authors where id = #{id}
    </delete>
    <select id="findAuthorTypesByAuthorsId" resultMap="authorResultMap">
        SELECT
        t.type, a.first_name, a.last_name
        FROM
        authors a
        JOIN authors_has_author_types at ON a.id = at.authors_id
        JOIN author_types t ON at.author_types_id = t.id
        where a.id = #{id}
    </select>
    <select id="findCompositionsByAuthorsId" resultMap="authorResultMap">
        SELECT
        a.first_name, a.last_name, c.title
        FROM
        authors a
        JOIN composition_has_authors ca ON a.id = ca.authors_id
        JOIN composition c ON ca.composition_id = c.id
        WHERE a.id = #{id}
    </select>
    <resultMap id="authorResultMap" type="pl.solvd.concerthall.binary.Authors" autoMapping="false">
        <id column="id" property="id"/>
        <result column="first_name" property="firstName"/>
        <result column="last_name" property="lastName"/>
        <collection property="authorTypes" ofType="pl.solvd.concerthall.binary.AuthorTypes"
                    resultMap="AuthorTypesResultMap"/>
        <collection property="composition" ofType="pl.solvd.concerthall.binary.Composition"
                    resultMap="CompositionResultMap"/>
    </resultMap>
    <resultMap id="AuthorTypesResultMap" type="pl.solvd.concerthall.binary.AuthorTypes" autoMapping="false">
        <id column="id" property="id"/>
        <result column="type" property="type"/>
    </resultMap>
    <resultMap id="CompositionResultMap" type="pl.solvd.concerthall.binary.Composition" autoMapping="false">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
    </resultMap>
</mapper>
